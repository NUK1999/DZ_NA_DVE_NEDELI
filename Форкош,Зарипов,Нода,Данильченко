#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Product {
public:
    string name;
    int quantity;
    double price;

    Product(string n, int q, double p) : name(n), quantity(q), price(p) {}

    void display() const {
        cout << "Товар: " << name << ", Количество: " << quantity << ", Цена: " << price << " руб." << endl;
    }
};

class Warehouse {
private:
    vector<Product> products;  

public:
    void viewProducts() const {
        if (products.empty()) {
            cout << "Склад пуст." << endl;
        } else {
            cout << "Содержимое склада:" << endl;
            for (const auto& product : products) {
                product.display();
            }
        }
    }

    void addProduct(const string& name, int quantity, double price) {
        for (auto& product : products) {
            if (product.name == name) {
                product.quantity += quantity;
                cout << "Товар '" << name << "' обновлен. Новое количество: " << product.quantity << endl;
                return;
            }
        }
        products.push_back(Product(name, quantity, price));
        cout << "Товар '" << name << "' добавлен на склад." << endl;
    }
    void removeProduct(const string& name, int quantity) {
        for (auto it = products.begin(); it != products.end(); ++it) {
            if (it->name == name) {
                if (it->quantity >= quantity) {
                    it->quantity -= quantity;
                    cout << "Товар '" << name << "' удален. Новое количество: " << it->quantity << endl;
                    if (it->quantity == 0) {
                        products.erase(it);
                        cout << "Товар '" << name << "' полностью удален со склада." << endl;
                    }
                    return;
                } else {
                    cout << "Недостаточно товара '" << name << "' на складе. Доступно: " << it->quantity << endl;
                    return;
                }
            }
        }
        cout << "Товар '" << name << "' не найден на складе." << endl;
    }
};
class Delivery {
private:
    vector<pair<string, int>> deliveries;  // Список доставок (пара - товар и количество)

public

    void addDelivery(const string& name, int quantity) {
        deliveries.push_back(make_pair(name, quantity));
        cout << "Доставка товара '" << name << "' на склад: " << quantity << " единиц." << endl;
      }
    void removeDelivery(const string& name, int quantity) {
        for (auto it = deliveries.begin(); it != deliveries.end(); ++it) {
            if (it->first == name) {
                if (it->second >= quantity) {
                    it->second -= quantity;
                    cout << "Доставка товара '" << name << "' удалена. Убрано " << quantity << " единиц." << endl;
                    if (it->second == 0) {
                        deliveries.erase(it);
                        cout << "Доставка товара '" << name << "' полностью удалена." << endl;
                    }
                    return;
                } else {
                    cout << "Недостаточно товара для удаления. Доступно в доставке: " << it->second << endl;
                    return;
                }
            }
        }
        cout << "Доставка товара '" << name << "' не найдена." << endl;
    }
};

int main() {
    Warehouse warehouse;
    Delivery delivery;

    int choice;

    do {
        cout << "\nМеню:\n";
        cout << "1. Просмотр содержимого на складе\n";
        cout << "2. Добавить товар на склад\n";
        cout << "3. Удалить товар со склада\n";
        cout << "4. Добавить доставку товаров\n";
        cout << "5. Удалить доставку товаров\n";
        cout << "6. Выход\n";
        cout << "Выберите опцию: ";
        cin >> choice;

        string name;
        int quantity;
        double price;

        switch (choice) {
            case 1:
                warehouse.viewProducts();
                break;
            case 2:
                cout << "Введите название товара: ";
                cin.ignore();  // Для игнорирования предыдущего символа новой строки
                getline(cin, name);
                cout << "Введите количество товара: ";
                cin >> quantity;
                cout << "Введите цену товара: ";
                cin >> price;
                warehouse.addProduct(name, quantity, price);
                break;
            case 3:
                cout << "Введите название товара для удаления: ";
                cin.ignore();
                getline(cin, name);
                cout << "Введите количество для удаления: ";
                cin >> quantity;
                warehouse.removeProduct(name, quantity);
                break;
            case 4:
                cout << "Введите название товара для доставки: ";
                cin.ignore();
                getline(cin, name);
                cout << "Введите количество товара для доставки: ";
                cin >> quantity;
                delivery.addDelivery(name, quantity);
                break;
            case 5:
                cout << "Введите название товара для удаления из доставки: ";
                cin.ignore();
                getline(cin, name);
                cout << "Введите количество для удаления из доставки: ";
                cin >> quantity;
                delivery.removeDelivery(name, quantity);
                break;
            case 6:
                cout << "Выход из программы.\n";
                break;
            default:
                cout << "Неверный выбор, попробуйте снова.\n";
                break;
        }
    } while (choice != 6);

    return 0;
}
